{"version":3,"sources":["Components/layout/SignInLinks.js","store/action/authActions.js","Components/layout/SignOutLinks.js","Components/layout/Navbar.js","Components/dashboard/Notifications.js","Components/projects/ProjectSummary.js","Components/projects/ProjectList.js","Components/dashboard/Dashboard.js","Components/projects/ProjectDetails.js","Components/auth/SignIn.js","Components/auth/SignUp.js","Components/projects/CreateProject.js","store/action/projectActions.js","App.js","serviceWorker.js","store/reducers/authReducer.js","store/reducers/projectReducer.js","store/reducers/rootReducer.js","config/fbConfig.js","index.js"],"names":["connect","dispatch","signOut","getState","getFirebase","auth","then","type","props","initials","profile","className","to","onClick","SignOutLinks","state","firebase","links","uid","id","Notifications","notifications","map","item","key","user","content","moment","time","toDate","fromNow","ProjectSummary","project","title","authorFirstName","authorLastName","createdAt","calendar","ProjectList","projects","Dashboard","this","Component","compose","firestore","ordered","firestoreConnect","collection","orderBy","limit","ownProps","match","params","data","doc","SignIn","email","password","handleChange","event","setState","target","value","handleSubmit","preventDefault","signIn","authError","onSubmit","htmlFor","onChange","creds","credentials","signInWithEmailAndPassword","catch","err","SignUp","firstName","lastName","signUp","newUser","getFirestore","createUserWithEmailAndPassword","resp","set","CreateProject","createProject","history","push","authorId","add","Date","App","path","component","exact","ProjectDetails","Boolean","window","location","hostname","initState","authReducer","action","message","projectReducer","console","log","rootReducer","combineReducers","firestoreReducer","firebaseReducer","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","settings","store","createStore","applyMiddleware","thunk","withExtraArgument","reduxFirestore","fbConfig","rrfProps","config","userProfile","useFirestoreForProfile","attachAuthIsReady","createFirestoreInstance","presence","sessions","AuthIsLoaded","children","useSelector","isLoaded","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.78b33822.chunk.js","sourcesContent":["//This component is shown on navbar when user has Signed in to account\r\nimport React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport {signOut} from '../../store/action/authActions';\r\n\r\n\r\nconst SignInLinks = (props) => {\r\n        const initials = props.profile.initials;\r\n        return(\r\n            <ul className='right'>\r\n                <li><NavLink to='/create'>New Project</NavLink></li>\r\n                <li><a onClick={props.signOut}>Logout</a></li>\r\n                <li><NavLink to='/' className='btn btn-floating pink'>{initials}</NavLink></li>\r\n            </ul>\r\n                \r\n        )\r\n}\r\n\r\nconst mapsDispatchToProps = (dispatch) => {\r\n        return{\r\n            signOut: () => dispatch(signOut())\r\n        }\r\n}\r\n\r\nexport default connect(null,mapsDispatchToProps)(SignInLinks);","export const signIn = (credentials) => {\r\n    return (dispatch, getState,{getFirebase}) => {\r\n        const firebase = getFirebase();\r\n\r\n        firebase.auth().signInWithEmailAndPassword(\r\n            credentials.email,\r\n            credentials.password\r\n            ).then( () => {\r\n                dispatch( { type: 'LOGIN_SUCCES' });\r\n            }).catch( (err) => {\r\n                dispatch( { type: 'LOGIN_ERROR', err})\r\n            });\r\n        \r\n    }\r\n}\r\n\r\nexport const signOut = () =>{\r\n    return (dispatch,getState,{ getFirebase }) => {\r\n        const firebase = getFirebase();\r\n\r\n        firebase.auth().signOut().then(()=>{\r\n            dispatch({ type: 'SIGNOUT_SUCCESS'});\r\n        });\r\n    }\r\n}\r\n\r\nexport const signUp = (newUser) => {\r\n    return (dispatch,getState,{ getFirebase, getFirestore }) => {\r\n        const firebase = getFirebase();\r\n        const firestore = getFirestore();\r\n\r\n        firebase.auth().createUserWithEmailAndPassword(\r\n            newUser.email,\r\n            newUser.password\r\n        ).then((resp) => {\r\n            return firestore.collection('users').doc(resp.user.uid).set({\r\n                firstName: newUser.firstName,\r\n                lastName: newUser.lastName,\r\n                initials: newUser.firstName[0] + newUser.lastName[0]\r\n            })\r\n        }).then(() => {\r\n            dispatch({ type: 'SIGNUP_SUCCES' })\r\n        }).catch(err => {\r\n            dispatch({ type: 'SIGNUP_ERROR', err})\r\n        })\r\n    }\r\n}","//This component is shown on navbar when user has Signed in to account\r\nimport React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst SignOutLinks = () => {\r\n        return(\r\n                <ul className='right'>\r\n                    <li><NavLink to='/signin'>Sign In</NavLink></li>\r\n                    <li><NavLink to='/signup'>Sign Up</NavLink></li>\r\n                </ul>\r\n        )\r\n}\r\n\r\nexport default SignOutLinks;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport SignInLinks from './SignInLinks';\r\nimport SignOutLinks from './SignOutLinks';\r\nimport { connect } from 'react-redux';\r\n\r\nconst Navbar = (props) => {\r\n    const { auth,profile } = props;\r\n    //console.log(auth);\r\n    const links = auth.uid ? <SignInLinks profile={profile}/> : <SignOutLinks />;\r\n    return(\r\n        <nav className='nav-wrapper'>\r\n            <div className='container'>\r\n                <Link to='/' className='brand-logo left' id='apptitle'>Bloggers</Link>\r\n                {links}\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    //console.log(state);\r\n    return{\r\n        auth: state.firebase.auth,\r\n        profile: state.firebase.profile\r\n    }\r\n}\r\nexport default connect(mapStateToProps)(Navbar);","//This notification component is shown on dashboard WITH Project List\r\nimport React from 'react';\r\nimport moment from 'moment';\r\n\r\nconst Notifications = (props) => {\r\n    const {notifications} = props;\r\n    return(\r\n        <div className='secton'>\r\n            <div className='card z-depth-0'>\r\n                <div className='card content'>\r\n                    <div className='card-titlee center-align '>Notifications</div>\r\n                    <ul className=\"notifications\">\r\n                        { notifications && notifications.map(item => {\r\n                            return(\r\n                                <li key={item.id} className='leftspace'>\r\n                                    <span className='pink-text'>{item.user} </span>\r\n                                    <span>{item.content}</span>\r\n                                    <div className='grey-text note-date'>\r\n                                        {moment(item.time.toDate()).fromNow()}\r\n                                    </div>\r\n                                </li>\r\n                            )\r\n                        })}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notifications;","import React from 'react';\r\nimport moment from 'moment';\r\n\r\n\r\nconst ProjectSummary = ({project}) => {                                   //Instead of manually puting these 4-5 times for card in project List we create template here and use it in ProjectList\r\n    return (\r\n        <div className='card z-depth 0 project-summary'>\r\n            <div className='card-content white-text'>\r\n                <span className='card-title' id='title'>{project.title}</span>\r\n                <p>Posted By {project.authorFirstName} {project.authorLastName}</p>\r\n                <p className=\"grey-text\">{moment(project.createdAt.toDate()).calendar()}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProjectSummary;","//THIS SECTION WILL BE ON DASHBOARD WITH NOTIFICATION\r\nimport React from 'react';\r\nimport ProjectSummary from './ProjectSummary';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst ProjectList = ({projects}) => {\r\n    return (\r\n        <div className='project-list section'>\r\n            { projects && projects.map(project => {\r\n                return(\r\n                    <Link to={'/project/'+ project.id} key={project.id} >\r\n                        <ProjectSummary project={project} />\r\n                    </Link>\r\n                    \r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProjectList;\r\n//here we recieve props inside this components called from dashboard we use  destructuring to directly grab projects and grab  projects property\r\n//that we recieve inside this component and then we can cyle through this projects and output them one by one by passing into  Project Summary","//This dashboard which is shown when user has signed in to his account\r\nimport React, { Component } from 'react';\r\nimport Notifications from './Notifications';\r\nimport ProjectList from '../projects/ProjectList';\r\nimport { connect } from 'react-redux';\r\nimport { firestoreConnect } from 'react-redux-firebase';\r\nimport { compose } from 'redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\n\r\nclass Dashboard extends Component{\r\n    \r\n     render(){\r\n        //console.log(this.props);\r\n        const {projects,auth,notifications} =this.props;\r\n        if(!auth.uid) return <Redirect to='/signin'  />\r\n         return(\r\n             <div className='dashboard container'>\r\n                <div className='row'>\r\n                    <div className='col s12 m6'>\r\n                        <ProjectList projects={projects}/>\r\n                    </div>\r\n                    <div className='not col s12 m5 offset-m1'>\r\n                        <Notifications notifications={notifications}/>\r\n                    </div>\r\n                </div>\r\n             </div>\r\n         )\r\n     }\r\n}\r\n\r\nconst mapStatetoProps = (state) =>{\r\n    //console.log(state);\r\n    return{\r\n        projects : state.firestore.ordered.projects,\r\n        auth: state.firebase.auth,\r\n        notifications: state.firestore.ordered.notifications\r\n    }\r\n}\r\n\r\n//here we r going to connect dashboard component with redux store so down here we use connect() which is a funtn which returns a HOC to \r\n//take in dashboard so we need to map our state somehow to the props in this component now we do that by creating funtn mapStatetoProps() \r\n// this functions takes in state of our store which we have aacces to & return down an obj & this obj is gonna represent which properties r attached to \r\n//to props of this componentso that we can acces them in our component here \r\n\r\nexport default compose(\r\n    connect(mapStatetoProps),\r\n    //firestoreConnect(() => ['projects','notifications'] )           //this is used to connect to collection ie projects from firestore\r\n    firestoreConnect([\r\n        {collection: 'projects', orderBy: ['createdAt','desc']},\r\n        {collection: 'notifications',limit:5,orderBy: ['time','desc']}\r\n    ])\r\n)(Dashboard)\r\n\r\n/*\r\nSo here we can see the projects that we have in store here in DOM\r\nWe connected our redux store and grabbing data inside our dashboard from tat store & we're passing it down\r\ninto project list & project summary comp then outputting\r\n*/","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {firestoreConnect } from 'react-redux-firebase';\r\nimport {compose} from 'redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport moment from 'moment';\r\n\r\n\r\nconst ProjectDetails = (props) => {\r\n    const { project,auth } = props;\r\n\r\n    if (!auth.uid) return <Redirect to='/signin' />\r\n\r\n    if(project){ \r\n        return(\r\n            <div className='container section project-details'>\r\n                <div className='card z-depth-0'>\r\n                    <p className='card-title ' id='center'>{project.title}</p>\r\n                    <div className='card-content'>\r\n                        <p>{project.content}</p>\r\n                    </div>\r\n                    <div className=\"card-action\">\r\n                        <div>Posted by {project.authorFirstName} {project.authorLastName}</div>\r\n                        <div>{moment(project.createdAt.toDate()).calendar()}</div>\r\n                    </div> \r\n                   \r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return(\r\n            <div className='container center'>\r\n                Loading project....\r\n            </div>\r\n        )\r\n        \r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = (state,ownProps) => {\r\n    //console.log(state);\r\n    const id = ownProps.match.params.id;\r\n    const projects = state.firestore.data.projects;\r\n    const project = projects ? projects[id] : null\r\n    return{\r\n        project:project,\r\n        auth:state.firebase.auth\r\n    }\r\n}\r\nexport default compose(\r\n    connect(mapStateToProps),\r\n    firestoreConnect((props)=>\r\n        [\r\n            {collection :'projects',doc:props.match.params.id},\r\n         ])\r\n)(ProjectDetails);\r\n\r\n","//rce\r\nimport React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { signIn } from '../../store/action/authActions';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\n\r\nclass SignIn extends Component {\r\n    state = {\r\n        email:'',\r\n        password:''\r\n    };\r\n\r\n    handleChange = (event) => {\r\n        \r\n        this.setState({\r\n            [event.target.id] : event.target.value                               //event.target.id is to know which input field is user changing ie by id email or password\r\n        })\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.signIn(this.state);\r\n    }\r\n\r\n\r\n    render() {\r\n        const { authError,auth } = this.props;\r\n        if (auth.uid) return <Redirect to='/' />\r\n        return (\r\n            <div className='container'>\r\n                <form onSubmit={this.handleSubmit} >\r\n                    <h4 className='grey-text'>Log In</h4>\r\n                    <div className='input-field '>\r\n                        <label htmlFor='email'>Email</label>\r\n                        <input type='email' id='email' onChange={this.handleChange} className='white-text' />\r\n                    </div>\r\n                    <div className='input-field'>\r\n                        <label htmlFor='password'>Password</label>\r\n                        <input type='password' id='password' onChange={this.handleChange} className='white-text'/>\r\n                    </div>\r\n                    \r\n                    <button className='waves-effect waves-light btn pink lighten-1'>Log In</button>\r\n                    <div className='red-text center'>\r\n                       { authError ? <p>{authError}</p> : null }\r\n                    </div>\r\n                </form>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        authError: state.auth.authError,\r\n        auth: state.firebase.auth\r\n    } \r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return{\r\n        signIn: (creds) => dispatch(signIn(creds))\r\n    }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(SignIn);\r\n","import React, { Component } from 'react'\r\nimport { Redirect } from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {signUp} from '../../store/action/authActions'\r\n\r\nclass SignUp extends Component {\r\n    state = {\r\n        firstName:'',\r\n        lastName:'',\r\n        email:'',\r\n        password:''\r\n    };\r\n\r\n    handleChange = (event) => {\r\n        \r\n        this.setState({\r\n            [event.target.id] : event.target.value                               //event.target.id is to know which input field is user changing ie by id email or password\r\n        })\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.signUp(this.state);\r\n    }\r\n\r\n\r\n    render() {\r\n        const { auth ,authError} = this.props;\r\n        if (auth.uid) return <Redirect to='/' />\r\n        return (\r\n            <div className='container'>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <h4 className='grey-text'>Register</h4>\r\n                    <div className='input-field'>\r\n                        <label htmlFor='firstName'>First Name</label>\r\n                        <input type='text' id='firstName' onChange={this.handleChange} className='white-text' />\r\n                    </div>\r\n                    <div className='input-field'>\r\n                        <label htmlFor='lastName'>Last Name</label>\r\n                        <input type='text' id='lastName' onChange={this.handleChange} className='white-text'/>\r\n                    </div>\r\n                    <div className='input-field'>\r\n                        <label htmlFor='email'>Email</label>\r\n                        <input type='email' id='email' onChange={this.handleChange} className='white-text'/>\r\n                    </div>\r\n                    <div className='input-field'>\r\n                        <label htmlFor='password'>Password</label>\r\n                        <input type='password' id='password' onChange={this.handleChange} className='white-text'/>\r\n                    </div>\r\n                    \r\n                    <button className='waves-effect waves-light btn pink lighten-1'>Sign Up</button>\r\n                    <div className='red-text center'>\r\n                       { authError ? <p>{authError}</p> : null }\r\n                    </div>\r\n                   \r\n                </form>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        auth: state.firebase.auth,\r\n        authError: state.auth.authError\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return{\r\n        signUp: (newUser) => dispatch(signUp(newUser))\r\n    }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(SignUp);\r\n","import React, { Component } from 'react'\r\nimport {connect} from 'react-redux';\r\nimport {createProject} from '../../store/action/projectActions'\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nclass CreateProject extends Component {\r\n    state = {\r\n        title:'',\r\n        content:''\r\n    };\r\n\r\n    handleChange = (event) => {\r\n        \r\n        this.setState({\r\n            [event.target.id] : event.target.value                               //event.target.id is to know which input field is user changing ie by id email or password\r\n        })\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        //console.log(this.state);\r\n        this.props.createProject(this.state);\r\n        this.props.history.push('/');\r\n    }\r\n\r\n\r\n    render() {\r\n        const { auth } = this.props;\r\n        if (!auth.uid) return <Redirect to='/signin' />\r\n\r\n        return (\r\n            <div className='container'>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <h4 className='grey-text'>Creat New Project</h4>\r\n                    <div className='input-field '>\r\n                        <label htmlFor='title'>Project Title</label>\r\n                        <input type='text' id='title' onChange={this.handleChange} className='white-text' />\r\n                    </div>\r\n                    <div className='input-field'>\r\n                        <label htmlFor='content'>Project Content</label>\r\n                        <textarea id='content' onChange={this.handleChange} className='materialize-textarea white-text'/>\r\n                    </div>\r\n                    \r\n                    <button className='waves-effect waves-light btn pink lighten-1'>Create Project</button>\r\n                   \r\n                </form>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) =>{\r\n    return{\r\n        auth: state.firebase.auth\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return{\r\n        createProject: (project) => dispatch(createProject(project))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(CreateProject);\r\n\r\n//here we r importing create project action creator from projectAction.js & we also import { connect } from ract redux so that we can connect this comonent to  redux store\r\n//\r\n\r\n\r\n//1.\r\n//So inside createproject component were filing in form then we click submit in this handleSubmit method were saying \r\n//this.props.createproject to create project and this is calling createProject method which is inside mapDispatchtoProps to create this on the props objects\r\n//we're passing  in project which is stored on states and were using this dispatch and calling this action creator ie projectAction.js which is imported\r\n//now go to projectAction.js","import { getFirebase } from \"react-redux-firebase\";\r\nimport { getFirestore } from \"redux-firestore\";\r\n\r\nexport const createProject = (project) => {\r\n    return (dispatch, getState,{getFirebase, getFirestore}) => {\r\n        //make async call to database\r\n        const firestore= getFirestore();\r\n        const profile = getState().firebase.profile;\r\n        const authorId = getState().firebase.auth.uid;\r\n        firestore.collection('projects').add({\r\n            ...project,                                              //so project we get here is from props which contains the state of project including title,content so we r spreading it\r\n            authorFirstName: profile.firstName,\r\n            authorLastName:profile.lastName,\r\n            authorId: authorId,\r\n            createdAt: new Date()\r\n        }).then( ()=>{                                                   //we r putting dispatch method in then method bcoz firestore.add is asyn call which weill take time & we dont want to dispatch the function so here we do only if data is added then call dispatch action\r\n            dispatch({ type:'CREATE_PROJECT', project });\r\n          }).catch((err)=>{\r\n            dispatch({ type:'CREATE_PROJECT_ERROR', err});\r\n          })\r\n        \r\n    }\r\n};\r\n//here we destructure getfirebase getfirestore bt they did not kow abt the project so we need to tell this getFirestore,getFirebase which we have imported in index.js\r\n//from index.js to connect with our firebase project config\r\n\r\n//here we return a function we use thunk to do that we get acces tio dispatch getstate & inside {getFirebase,getFirestore} we r pausing dispatch\r\n//while we do this asynchronous stuff  so we r getting firestore then we r adding a new document to projects collection based on the prohject that we\r\n//recieve from the state of createproject component so this adding of data is async so it takes time so we r adding then method  & then fires a dispatch \r\n//when its complete\r\n//now go to projectReducer","import React from 'react';\nimport { BrowserRouter,Route,Switch } from 'react-router-dom';\nimport Navbar from './Components/layout/Navbar';\nimport Dashboard from './Components/dashboard/Dashboard';\nimport ProjectDetails from './Components/projects/ProjectDetails';\nimport SignIn from './Components/auth/SignIn';\nimport SignUp from './Components/auth/SignUp';\nimport CreateProject from './Components/projects/CreateProject';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App \">\n          <Navbar />\n          <Switch>\n            <Route path='/' component={Dashboard} exact/>\n            <Route path='/project/:id' component={ProjectDetails} />\n            <Route path='/signin' component={SignIn} />\n            <Route path='/signup' component={SignUp} />\n            <Route path='/create' component={CreateProject} />\n          </Switch>\n      </div>\n    </BrowserRouter>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initState={\r\n    authError: null\r\n};\r\n\r\nconst authReducer = (state=initState , action) => {\r\n    switch(action.type){\r\n        case 'LOGIN_ERROR':\r\n            //console.log('login error');\r\n            return {\r\n                ...state,\r\n                authError: 'Login Failed'\r\n            } \r\n        case 'LOGIN_SUCCESS':\r\n            //console.log('login success');\r\n            return {\r\n                ...state,\r\n                authError: null\r\n            } \r\n        case 'SIGNOUT_SUCCESS':\r\n            //console.log('signout success');\r\n            return state;\r\n        case 'SIGNUP_SUCCESS':\r\n            //console.log('signup success');\r\n            return{\r\n                ...state,\r\n                authError: null\r\n            }\r\n        case 'SIGNUP_ERROR':\r\n            //console.log('signup error');\r\n            return{\r\n                ...state,\r\n                authError: action.err.message\r\n            }\r\n        default:\r\n                return state;   \r\n        }\r\n}\r\n\r\nexport default authReducer;","const initState={\r\n    projects:[\r\n        {id:1 , title:'react prject' ,content:'AAAAAAAAA BBBBBBBBB CCCCCCCCCCC      DDDDDDDDDDD EEEEEEEEEEEEEE'},\r\n        {id:2 , title:'REDUX' ,content:'AAAAAAAAA BBBBBBBBB CCCCCCCCCCC      DDDDDDDDDDD EEEEEEEEEEEEEE'} ,\r\n        {id:3 , title:'CONTENT prject' ,content:'AAAAAAAAA BBBBBBBBB CCCCCCCCCCC      DDDDDDDDDDD EEEEEEEEEEEEEE'}\r\n    ]\r\n};\r\n\r\nconst projectReducer = (state=initState , action) => {\r\n    switch(action.type){\r\n        case 'CREATE_PROJECT':\r\n            console.log('created project',action.project);\r\n            return state;\r\n        case 'CREATE_PROJECT_ERROR':\r\n            console.log('error creating project',action.err);\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default projectReducer;\r\n\r\n//here we handle action in switch depending upon type ","import authReducer from './authReducer';\r\nimport projectReducer from './projectReducer';\r\nimport { combineReducers } from 'redux';\r\nimport { firestoreReducer } from 'redux-firestore';\r\nimport { firebaseReducer } from 'react-redux-firebase';\r\n\r\nconst rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    project: projectReducer,\r\n    firestore: firestoreReducer,\r\n    firebase: firebaseReducer\r\n});\r\nexport default rootReducer;\r\n\r\n//so in background this firestore reducer is automstically sink this property on state obj to our data in database is going to retrieve\r\n//that data for us & that data is going to be dependent on which component is currently active at that time & what data that component needs\r\n//that is the data tat will be synced in state y this reducer\r\n\r\n//now second step is to connect a component with final collection so we have firestore rducer which will sink our firestore data with store state but we also\r\n//need to say inside our component that we want to connect to a certain collection inside firestore database","  import firebase from 'firebase/app';\r\n  import 'firebase/firestore';\r\n  import 'firebase/auth';\r\n  // import 'firebase/database';\r\n\r\n  \r\n  // Your web app's Firebase configuration\r\n  var firebaseConfig = {\r\n    apiKey: \"AIzaSyB0bMAACnfe72IFj0hfu6aHvsqlyvch5CA\",\r\n    authDomain: \"collab-reactapp.firebaseapp.com\",\r\n    databaseURL: \"https://collab-reactapp.firebaseio.com\",\r\n    projectId: \"collab-reactapp\",\r\n    storageBucket: \"collab-reactapp.appspot.com\",\r\n    messagingSenderId: \"145595461157\",\r\n    appId: \"1:145595461157:web:556e0d34cd079e8d4319cc\",\r\n    measurementId: \"G-M899FDQ8G0\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n  //firebase.firestore().settings({ timestampsInSnapshots:true });  //this initializes firestore and add on settings & inside settings we pass an property called timestampsinSnapshots and set it true so this was justa update in firebase library which changes how firebase with time stamps\r\n  firebase.firestore().settings({});\r\n\r\n  export default firebase;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware,compose } from 'redux';\nimport rootReducer from './store/reducers/rootReducer';\nimport {Provider,useSelector} from 'react-redux';\nimport thunk from 'redux-thunk';\nimport { ReactReduxFirebaseProvider, getFirebase,isLoaded } from 'react-redux-firebase';              //old version by net ninja : import {reactReduxFirebase,getFirebase} from 'react-redux-firebase';\nimport { reduxFirestore, getFirestore, createFirestoreInstance} from 'redux-firestore';       //import {reduxFirestore,getFirestore} from 'redux-firestore';\nimport fbConfig from './config/fbConfig';\nimport firebase from 'firebase/app';\n\n\nconst store = createStore(rootReducer,\n  compose(\n    applyMiddleware(thunk.withExtraArgument( {getFirebase,getFirestore} )),\n    reduxFirestore(fbConfig),\n    //reactReduxFirebase(fbConfig)\n  ) \n);\n\nconst rrfConfig={                  // react-redux-firebase config\n  userProfile:'users',\n  useFirestoreForProfile: true,\n\tattachAuthIsReady: true\n}\n\nconst rrfProps = {\n  firebase,\n  config:rrfConfig,\n  dispatch:store.dispatch,\n  createFirestoreInstance,\n  userProfile: 'users', // where profiles are stored in database\n  presence: 'presence', // where list of online users is stored in database\n  sessions: 'sessions'\n};\n\nfunction AuthIsLoaded({ children }) {\n  const auth = useSelector(state => state.firebase.auth)\n  if (!isLoaded(auth)) return <div>Loading Screen...</div>;\n      return children\n}\n\nReactDOM.render(\n  <Provider store={store}>\n    <ReactReduxFirebaseProvider {...rrfProps}>\n      <AuthIsLoaded>\n          <App />\n      </AuthIsLoaded>\n    </ReactReduxFirebaseProvider>\n  </Provider>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}